#!/usr/bin/env node
const { execSync, exec } = require("child_process");
function ensurePackages() {
  const requiredPackages = ["axios", "cli-table3", "figlet", "boxen", "screenshot-desktop"];

  requiredPackages.forEach((pkg) => {
    try {
      require.resolve(pkg);
    } catch {
      console.log(`ƒêang c√†i package thi·∫øu: ${pkg}`);
      try {
        execSync(`npm install ${pkg}`, { stdio: "inherit" });
      } catch (e) {
        console.error(`L·ªói khi c√†i ${pkg}:`, e.message);
        process.exit(1);
      }
    }
  });
}
ensurePackages();

const axios = require("axios");
const readline = require("readline");
const fs = require("fs");
const path = require("path");
const os = require("os");
const Table = require("cli-table3");
const CONFIG_PATH = path.join(__dirname, "multi_configs.json");
const WEBHOOK_CONFIG_PATH = path.join(__dirname, "webhook_config.json");
const PREFIX_CONFIG_PATH = path.join(__dirname, "package_prefix_config.json");
const ACTIVITY_CONFIG_PATH = path.join(__dirname, "activity_config.json");
const util = require("util");
const figlet = require("figlet");
const _boxen = require("boxen");
const boxen = _boxen.default || _boxen;
const screenshot = require("screenshot-desktop");

class Utils {
  static ensureRoot() {
    try {
      const uid = execSync("id -u").toString().trim();
      if (uid !== "0") {
        const node = execSync("which node").toString().trim();
        console.log("C·∫ßn quy·ªÅn root, chuy·ªÉn qua su...");
        execSync(`su -c "${node} ${__filename}"`, { stdio: "inherit" });
        process.exit(0);
      }
    } catch (e) {
      console.error("Kh√¥ng th·ªÉ ch·∫°y v·ªõi quy·ªÅn root:", e.message);
      process.exit(1);
    }
  }

  static enableWakeLock() {
    try {
      exec("termux-wake-lock");
      console.log("Wake lock b·∫≠t ‚ö°");
    } catch {
      console.warn("Kh√¥ng b·∫≠t ƒë∆∞·ª£c wake lock üòÖ");
    }
  }

  // Removed killApp function - no longer needed


  static async launch(placeId, linkCode = null, packageName) {
    const url = linkCode
      ? `roblox://placeID=${placeId}&linkCode=${linkCode}`
      : `roblox://placeID=${placeId}`;

    console.log(`üöÄ [${packageName}] ƒêang m·ªü: ${url}`);
    if (linkCode) console.log(`‚ú® [${packageName}] ƒê√£ join b·∫±ng linkCode: ${linkCode}`);

    // X√°c ƒë·ªãnh activity d·ª±a tr√™n package name v·ªõi logic prefix ƒë·ªông
    let activity;
    const prefix = this.loadPackagePrefixConfig();
    const customActivity = this.loadActivityConfig();

    // N·∫øu c√≥ activity t√πy ch·ªânh, s·ª≠ d·ª•ng n√≥
    if (customActivity) {
      activity = customActivity;
      console.log(`üéØ [${packageName}] S·ª≠ d·ª•ng activity t√πy ch·ªânh: ${activity}`);
    } else {
      // Logic m·ªõi: Activity s·∫Ω lu√¥n kh·ªõp v·ªõi prefix c·ªßa package
      if (packageName.startsWith(`${prefix}.client.`)) {
        // N·∫øu package l√† custom (c√≥ th√™m suffix sau client)
        // V√≠ d·ª•: com.robox.client.vnggameu -> com.robox.client.vnggameu/com.robox.client.ActivityProtocolLaunch
        activity = `${prefix}.client.ActivityProtocolLaunch`;
      } else if (packageName === `${prefix}.client`) {
        // Package ch√≠nh: com.robox.client -> com.robox.client/com.robox.client.ActivityProtocolLaunch
        activity = `${prefix}.client.ActivityProtocolLaunch`;
      } else {
        // Fallback: S·ª≠ d·ª•ng activity chu·∫©n v·ªõi prefix hi·ªán t·∫°i
        activity = `${prefix}.client.ActivityProtocolLaunch`;
      }
      console.log(`üéØ [${packageName}] S·ª≠ d·ª•ng activity m·∫∑c ƒë·ªãnh: ${activity}`);
    }

    const command = `am start -n ${packageName}/${activity} -a android.intent.action.VIEW -d "${url}" --activity-clear-top`;

    try {
      execSync(command, { stdio: 'pipe' });
      console.log(`‚úÖ [${packageName}] Launch command executed!`);
    } catch (e) {
      console.error(`‚ùå [${packageName}] Launch failed: ${e.message}`);
    }
  }

  static ask(rl, msg) {
    return new Promise((r) => rl.question(msg, r));
  }

  static saveMultiConfigs(configs) {
    try {
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(configs, null, 2));
      console.log(`üíæ ƒê√£ l∆∞u multi configs t·∫°i ${CONFIG_PATH}`);
    } catch (e) {
      console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u configs: ${e.message}`);
    }
  }

  static loadMultiConfigs() {
    if (!fs.existsSync(CONFIG_PATH)) return {};
    try {
      const raw = fs.readFileSync(CONFIG_PATH);
      return JSON.parse(raw);
    } catch {
      return {};
    }
  }

  static saveWebhookConfig(config) {
    try {
      fs.writeFileSync(WEBHOOK_CONFIG_PATH, JSON.stringify(config, null, 2));
      console.log(`üíæ ƒê√£ l∆∞u webhook config t·∫°i ${WEBHOOK_CONFIG_PATH}`);
    } catch (e) {
      console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u webhook config: ${e.message}`);
    }
  }

  static loadWebhookConfig() {
    if (!fs.existsSync(WEBHOOK_CONFIG_PATH)) return null;
    try {
      const raw = fs.readFileSync(WEBHOOK_CONFIG_PATH);
      const config = JSON.parse(raw);

      // ƒê·∫£m b·∫£o tr∆∞·ªùng enabled t·ªìn t·∫°i (backward compatibility)
      if (config && typeof config.enabled === 'undefined') {
        config.enabled = true;
      }

      return config;
    } catch {
      return null;
    }
  }

  static savePackagePrefixConfig(prefix) {
    try {
      const config = { prefix: prefix };
      fs.writeFileSync(PREFIX_CONFIG_PATH, JSON.stringify(config, null, 2));
      console.log(`üíæ ƒê√£ l∆∞u prefix package: ${prefix}`);
    } catch (e) {
      console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u prefix config: ${e.message}`);
    }
  }

  static loadPackagePrefixConfig() {
    if (!fs.existsSync(PREFIX_CONFIG_PATH)) {
      // Tr·∫£ v·ªÅ prefix m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ config
      return "com.roblox";
    }
    try {
      const raw = fs.readFileSync(PREFIX_CONFIG_PATH);
      const config = JSON.parse(raw);
      return config.prefix || "com.roblox";
    } catch {
      return "com.roblox";
    }
  }

  static saveActivityConfig(activity) {
    try {
      const config = { activity: activity };
      fs.writeFileSync(ACTIVITY_CONFIG_PATH, JSON.stringify(config, null, 2));
      console.log(`üíæ ƒê√£ l∆∞u activity: ${activity}`);
    } catch (e) {
      console.error(`‚ùå Kh√¥ng th·ªÉ l∆∞u activity config: ${e.message}`);
    }
  }

  static loadActivityConfig() {
    if (!fs.existsSync(ACTIVITY_CONFIG_PATH)) {
      // Tr·∫£ v·ªÅ activity m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ config
      return null;
    }
    try {
      const raw = fs.readFileSync(ACTIVITY_CONFIG_PATH);
      const config = JSON.parse(raw);
      return config.activity || null;
    } catch {
      return null;
    }
  }

  static async takeScreenshot() {
    try {
      // S·ª≠ d·ª•ng screencap c·ªßa Android v·ªõi quy·ªÅn root
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `screenshot_${timestamp}.png`;
      const filepath = path.join(__dirname, filename);
      
      // Ch·∫°y screencap v·ªõi su
      const screencapCommand = `su -c "screencap -p"`;
      const imgBuffer = execSync(screencapCommand, { stdio: 'pipe' });
      
      fs.writeFileSync(filepath, imgBuffer);
      console.log(`üì∏ ƒê√£ ch·ª•p ·∫£nh: ${filename}`);
      return filepath;
    } catch (e) {
      console.error(`‚ùå L·ªói khi ch·ª•p ·∫£nh v·ªõi screencap: ${e.message}`);
      
      // Fallback: th·ª≠ v·ªõi screenshot-desktop
      try {
        const img = await screenshot();
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `screenshot_${timestamp}.png`;
        const filepath = path.join(__dirname, filename);
        
        fs.writeFileSync(filepath, img);
        console.log(`üì∏ ƒê√£ ch·ª•p ·∫£nh (fallback): ${filename}`);
        return filepath;
      } catch (e2) {
        console.log(`üì± Kh√¥ng th·ªÉ ch·ª•p ·∫£nh - T·∫°o file th√¥ng tin h·ªá th·ªëng`);
        // T·∫°o file th√¥ng tin h·ªá th·ªëng thay th·∫ø
        try {
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const filename = `system_info_${timestamp}.txt`;
          const filepath = path.join(__dirname, filename);
          
          // Thu th·∫≠p th√¥ng tin h·ªá th·ªëng
          const systemInfo = {
            platform: os.platform(),
            arch: os.arch(),
            nodeVersion: process.version,
            uptime: os.uptime(),
            totalMemory: os.totalmem(),
            freeMemory: os.freemem(),
            cpuCount: os.cpus().length,
            timestamp: new Date().toISOString(),
            environment: process.env.TERMUX_VERSION ? 'Termux' : 'Other'
          };
          
          const content = `=== SYSTEM INFORMATION ===
Platform: ${systemInfo.platform}
Architecture: ${systemInfo.arch}
Node.js Version: ${systemInfo.nodeVersion}
Uptime: ${Math.floor(systemInfo.uptime / 3600)}h ${Math.floor((systemInfo.uptime % 3600) / 60)}m
Total Memory: ${Math.round(systemInfo.totalMemory / 1024 / 1024)} MB
Free Memory: ${Math.round(systemInfo.freeMemory / 1024 / 1024)} MB
CPU Cores: ${systemInfo.cpuCount}
Environment: ${systemInfo.environment}
Timestamp: ${systemInfo.timestamp}
========================`;
          
          fs.writeFileSync(filepath, content);
          console.log(`üìã ƒê√£ t·∫°o file th√¥ng tin h·ªá th·ªëng: ${filename}`);
          return filepath;
        } catch (e3) {
          console.error(`‚ùå Kh√¥ng th·ªÉ t·∫°o file th√¥ng tin: ${e3.message}`);
          return null;
        }
      }
    }
  }

  static deleteScreenshot(filepath) {
    try {
      if (fs.existsSync(filepath)) {
        fs.unlinkSync(filepath);
        console.log(`üóëÔ∏è ƒê√£ x√≥a ·∫£nh: ${path.basename(filepath)}`);
      }
    } catch (e) {
      console.error(`‚ùå L·ªói khi x√≥a ·∫£nh: ${e.message}`);
    }
  }

  static async sendWebhookEmbed(webhookUrl, embedData, screenshotPath = null) {
    try {
      const payload = {
        embeds: [embedData]
      };

      if (screenshotPath && fs.existsSync(screenshotPath)) {
        const screenshotBuffer = fs.readFileSync(screenshotPath);
        const fileExt = path.extname(screenshotPath).toLowerCase();
        const contentType = fileExt === '.png' ? 'image/png' : 'text/plain';
        const boundary = '----WebKitFormBoundary' + Math.random().toString(16).substr(2);
        
        let body = '';
        body += `--${boundary}\r\n`;
        body += `Content-Disposition: form-data; name="payload_json"\r\n`;
        body += `Content-Type: application/json\r\n\r\n`;
        body += JSON.stringify(payload) + '\r\n';
        body += `--${boundary}\r\n`;
        body += `Content-Disposition: form-data; name="file"; filename="${path.basename(screenshotPath)}"\r\n`;
        body += `Content-Type: ${contentType}\r\n\r\n`;
        
        const multipartBody = Buffer.concat([
          Buffer.from(body, 'utf8'),
          screenshotBuffer,
          Buffer.from(`\r\n--${boundary}--\r\n`, 'utf8')
        ]);

        await axios.post(webhookUrl, multipartBody, {
          headers: {
            'Content-Type': `multipart/form-data; boundary=${boundary}`,
            'Content-Length': multipartBody.length
          },
        });
      } else {
        // G·ª≠i ch·ªâ embed
        await axios.post(webhookUrl, payload, {
          headers: {
            'Content-Type': 'application/json'
          }
        });
      }

      console.log(`‚úÖ ƒê√£ g·ª≠i webhook th√†nh c√¥ng!`);
      
      // X√≥a ·∫£nh sau 5 gi√¢y
      if (screenshotPath) {
        setTimeout(() => {
          this.deleteScreenshot(screenshotPath);
        }, 5000);
      }
    } catch (e) {
      console.error(`‚ùå L·ªói khi g·ª≠i webhook: ${e.message}`);
    }
  }

  static detectAllRobloxPackages() {
    const packages = {};

    try {
      // S·ª≠ d·ª•ng prefix c√≥ th·ªÉ c·∫•u h√¨nh thay v√¨ hardcode
      const prefix = this.loadPackagePrefixConfig();
      const result = execSync(`pm list packages | grep ${prefix}`, { encoding: 'utf8' });
      const lines = result.split('\n').filter(line => line.includes(prefix));

      lines.forEach(line => {
        const match = line.match(new RegExp(`package:(${prefix.replace(/\./g, '\\.')}[^\\s]+)`));
        if (match) {
          const packageName = match[1];
          let displayName = packageName;

          // So s√°nh v·ªõi prefix ƒë·ªông thay v√¨ hardcode
          if (packageName === `${prefix}.client`) {
            displayName = 'Roblox Qu·ªëc t·∫ø üåç';
          } else if (packageName === `${prefix}.client.vnggames`) {
            displayName = 'Roblox VNG üáªüá≥';
          } else {
            displayName = `Roblox Custom (${packageName}) üéÆ`;
          }

          packages[packageName] = {
            packageName,
            displayName
          };
        }
      });
    } catch (e) {
      console.error(`‚ùå L·ªói khi qu√©t packages: ${e.message}`);
    }

    return packages;
  }

  static validatePackageIntegrity(configs) {
    console.log("üîç ƒêang ki·ªÉm tra to√†n v·∫πn packages...");
    
    try {
      // L·∫•y danh s√°ch packages hi·ªán c√≥ trong h·ªá th·ªëng
      const systemPackages = this.detectAllRobloxPackages();
      const systemPackageNames = Object.keys(systemPackages);
      
      // L·∫•y danh s√°ch packages trong config
      const configPackageNames = Object.keys(configs);
      
      if (configPackageNames.length === 0) {
        console.log("‚ùå Kh√¥ng c√≥ config n√†o trong file JSON!");
        console.log("üîß Vui l√≤ng ch·∫°y setup packages ƒë·ªÉ t·∫°o config.");
        return false;
      }
      
      if (systemPackageNames.length === 0) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y package Roblox n√†o trong h·ªá th·ªëng!");
        console.log("üì± Vui l√≤ng c√†i ƒë·∫∑t √≠t nh·∫•t m·ªôt app Roblox.");
        return false;
      }
      
      // Ki·ªÉm tra packages trong config c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
      const missingPackages = configPackageNames.filter(pkg => !systemPackageNames.includes(pkg));
      
      // Ki·ªÉm tra packages trong h·ªá th·ªëng c√≥ d∆∞ kh√¥ng (kh√¥ng c√≥ trong config)
      const extraPackages = systemPackageNames.filter(pkg => !configPackageNames.includes(pkg));
      
      let hasError = false;
      
      if (missingPackages.length > 0) {
        console.log("\n‚ùå PACKAGES THI·∫æU - C√≥ trong config nh∆∞ng kh√¥ng c√≥ trong h·ªá th·ªëng:");
        missingPackages.forEach(pkg => {
          const displayName = systemPackages[pkg]?.displayName || pkg;
          console.log(`  ‚ö†Ô∏è ${displayName} (${pkg})`);
        });
        console.log("üîß Gi·∫£i ph√°p: C√†i ƒë·∫∑t l·∫°i packages n√†y ho·∫∑c x√≥a kh·ªèi config.");
        hasError = true;
      }
      
      if (extraPackages.length > 0) {
        console.log("\n‚ö†Ô∏è PACKAGES D∆Ø - C√≥ trong h·ªá th·ªëng nh∆∞ng kh√¥ng c√≥ trong config:");
        extraPackages.forEach(pkg => {
          const displayName = systemPackages[pkg]?.displayName || pkg;
          console.log(`  üì¶ ${displayName} (${pkg})`);
        });
        console.log("üîß Gi·∫£i ph√°p: Th√™m v√†o config b·∫±ng c√°ch ch·∫°y setup packages ho·∫∑c b·ªè qua.");
      }
      
      // Ki·ªÉm tra t·ª´ng config c√≥ h·ª£p l·ªá kh√¥ng
      for (const [packageName, config] of Object.entries(configs)) {
        if (!config.username || !config.userId || !config.placeId || !config.delaySec) {
          console.log(`\n‚ùå CONFIG KH√îNG ƒê·∫¶Y ƒê·ª¶ cho ${packageName}:`);
          if (!config.username) console.log("  ‚ö†Ô∏è Thi·∫øu username");
          if (!config.userId) console.log("  ‚ö†Ô∏è Thi·∫øu userId");
          if (!config.placeId) console.log("  ‚ö†Ô∏è Thi·∫øu placeId");
          if (!config.delaySec) console.log("  ‚ö†Ô∏è Thi·∫øu delaySec");
          console.log("üîß Gi·∫£i ph√°p: Ch·∫°y l·∫°i setup packages ho·∫∑c s·ª≠a config.");
          hasError = true;
        }
      }
      
      if (hasError) {
        console.log("\n‚ùå KI·ªÇM TRA TO√ÄN V·∫∏N TH·∫§T B·∫†I!");
        console.log("üö´ Kh√¥ng th·ªÉ ch·∫°y auto rejoin khi c√≥ l·ªói to√†n v·∫πn.");
        return false;
      }
      
      const matchingPackages = configPackageNames.filter(pkg => systemPackageNames.includes(pkg));
      console.log(`‚úÖ Ki·ªÉm tra to√†n v·∫πn th√†nh c√¥ng!`);
      console.log(`üìä C√≥ ${matchingPackages.length}/${configPackageNames.length} packages kh·∫£ d·ª•ng`);
      
      if (extraPackages.length > 0) {
        console.log(`‚ÑπÔ∏è C√≥ ${extraPackages.length} packages d∆∞ (kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ho·∫°t ƒë·ªông)`);
      }
      
      return true;
      
    } catch (e) {
      console.error(`‚ùå L·ªói khi ki·ªÉm tra to√†n v·∫πn: ${e.message}`);
      console.log("üîß Vui l√≤ng ki·ªÉm tra l·∫°i h·ªá th·ªëng v√† config file.");
      return false;
    }
  }



  static getRobloxCookie(packageName) {
    console.log(`üç™ [${packageName}] ƒêang l·∫•y cookie ROBLOSECURITY...`);
    let raw;
    try {
      raw = execSync(
        `cat /data/data/${packageName}/app_webview/Default/Cookies | strings | grep ROBLOSECURITY`
      ).toString();
    } catch {
      try {
        raw = execSync(
          `su -c sh -c 'cat /data/data/${packageName}/app_webview/Default/Cookies | strings | grep ROBLOSECURITY'`
        ).toString();
      } catch (err) {
        console.error(`‚ùå [${packageName}] Kh√¥ng th·ªÉ ƒë·ªçc cookie b·∫±ng c·∫£ 2 c√°ch.`);
        return null;
      }
    }

    // S·ª≠ d·ª•ng regex ƒë·ªông thay v√¨ hardcode ƒë·ªÉ t√¨m cookie ROBLOSECURITY
    const prefix = this.loadPackagePrefixConfig();
    const match = raw.match(/\.ROBLOSECURITY_([^\s\/]+)/);
    if (!match) {
      console.error(`‚ùå [${packageName}] Kh√¥ng t√¨m ƒë∆∞·ª£c cookie ROBLOSECURITY!`);
      return null;
    }

    let cookieValue = match[1].trim();
    if (!cookieValue.startsWith("_")) cookieValue = "_" + cookieValue;
    return `.ROBLOSECURITY=${cookieValue}`;
  }

  static async curlPastebinVisits() {
    try {
      // Th√™m timeout 5 gi√¢y cho request
      const res = await axios.get("https://pastebin.com/Q9yk1GNq", {
        timeout: 5000, // 5 seconds timeout
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      const html = res.data;
      // S·ª≠a l·∫°i regex: ch·ªâ c·∫ßn escape ƒë√∫ng cho regex literal
      const match = html.match(/<div class="visits"[^>]*>\s*([\d,.]+)\s*<\/div>/);
      if (match && match[1]) {
        return match[1].replace(/,/g, '');
      }
      return null;
    } catch (e) {
      // Kh√¥ng log l·ªói ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn logic main
      return null;
    }
  }

  static maskSensitiveInfo(text) {
    if (!text || text === 'Unknown') return text;
    const str = text.toString();
    if (str.length <= 3) return str;
    return '*'.repeat(str.length - 3) + str.slice(-3);
  }
}

class GameLauncher {
  static async handleGameLaunch(shouldLaunch, placeId, linkCode, packageName, rejoinOnly = false) {
    if (shouldLaunch) {
      console.log(`üéØ [${packageName}] Starting launch process...`);
      
      // Ch·ªâ launch, kh√¥ng kill app
      await Utils.launch(placeId, linkCode, packageName);
      
      console.log(`‚úÖ [${packageName}] Launch process completed!`);
    }
  }
}

class RobloxUser {
  constructor(username, userId = null, cookie = null) {
    this.username = username;
    this.userId = userId;
    this.cookie = cookie;
  }

  async fetchAuthenticatedUser() {
    try {
      const res = await axios.get("https://users.roblox.com/v1/users/authenticated", {
        headers: {
          Cookie: this.cookie,
          "User-Agent": "Mozilla/5.0 (Linux; Android 10; Termux)",
          Accept: "application/json",
        },
      });

      const { name, id } = res.data;
      this.username = name;
      this.userId = id;
      console.log(`‚úÖ L·∫•y info th√†nh c√¥ng cho ${name}!`);
      return this.userId;
    } catch (e) {
      console.error(`‚ùå L·ªói x√°c th·ª±c ng∆∞·ªùi d√πng:`, e.message);
      return null;
    }
  }

  async getPresence() {
    try {
      const r = await axios.post(
        "https://presence.roproxy.com/v1/presence/users",
        { userIds: [this.userId] },
        {
          headers: {
            Cookie: this.cookie,
            "User-Agent": "Mozilla/5.0 (Linux; Android 10; Termux)",
            Accept: "application/json",
          },
        }
      );
      return r.data.userPresences?.[0];
    } catch {
      return null;
    }
  }
}

class GameSelector {
  constructor() {
    this.GAMES = {
      "1": ["126884695634066", "Grow-a-Garden üå±"],
      "2": ["2753915549", "Blox-Fruits üçá"],
      "3": ["6284583030", "Pet-Simulator-X üêæ"],
      "4": ["126244816328678", "DIG ‚õèÔ∏è"],
      "5": ["116495829188952", "Dead-Rails-Alpha üöÇ"],
      "6": ["8737602449", "PLS-DONATE üí∞"],
      "0": ["custom", "T√πy ch·ªânh ‚öôÔ∏è"],
    };
  }

  async chooseGame(rl) {
    console.log(`\nüéÆ Ch·ªçn game:`);
    for (let k in this.GAMES) {
      console.log(`${k}. ${this.GAMES[k][1]} (${this.GAMES[k][0]})`);
    }

    const ans = (await Utils.ask(rl, "Nh·∫≠p s·ªë: ")).trim();

    if (ans === "0") {
      const sub = (await Utils.ask(rl, "0.1 ID th·ªß c√¥ng | 0.2 Link private redirect: ")).trim();
      if (sub === "1") {
        const pid = (await Utils.ask(rl, "Nh·∫≠p Place ID: ")).trim();
        return { placeId: pid, name: "T√πy ch·ªânh ‚öôÔ∏è", linkCode: null };
      }
      if (sub === "2") {
        console.log("\nüìé D√°n link redirect sau khi v√†o private server.");
        console.log("VD: https://www.roblox.com/games/2753915549/Blox-Fruits?privateServerLinkCode=77455530946706396026289495938493");
        while (true) {
          const link = await Utils.ask(rl, "\nD√°n link redirect ƒë√£ chuy·ªÉn h∆∞·ªõng: ");
          const m = link.match(/\/games\/(\d+)[^?]*\?[^=]*=([\w-]+)/);
          if (!m) {
            console.log(`‚ùå Link kh√¥ng h·ª£p l·ªá!`);
            continue;
          }
          return {
            placeId: m[1],
            name: "Private Server üîí",
            linkCode: m[2],
          };
        }
      }
      throw new Error(`‚ùå Kh√¥ng h·ª£p l·ªá!`);
    }

    if (this.GAMES[ans]) {
      return {
        placeId: this.GAMES[ans][0],
        name: this.GAMES[ans][1],
        linkCode: null,
      };
    }

    throw new Error(`‚ùå Kh√¥ng h·ª£p l·ªá!`);
  }
}

class StatusHandler {
  constructor() {
    this.hasLaunched = false;
    this.joinedAt = 0;
  }

  analyzePresence(presence, targetRootPlaceId) {
    const now = Date.now();

    if (!presence || presence.userPresenceType === undefined) {
      return {
        status: "Kh√¥ng r√µ ‚ùì",
        info: "Kh√¥ng l·∫•y ƒë∆∞·ª£c tr·∫°ng th√°i ho·∫∑c thi·∫øu rootPlaceId",
        shouldLaunch: true, // Always try to rejoin when presence is unclear
        rejoinOnly: true
      };
    }

    // User is offline (presence type 0)
    if (presence.userPresenceType === 0) {
      return {
        status: "Offline üí§", 
        info: "User offline! Ti·∫øn h√†nh rejoin! üöÄ",
        shouldLaunch: true, // Always rejoin when offline
        rejoinOnly: true
      };
    }

    // User is online but not in game (presence type 1 - online but not playing)
    if (presence.userPresenceType === 1) {
      return {
        status: "Online nh∆∞ng kh√¥ng trong game üò¥",
        info: "User online nh∆∞ng kh√¥ng trong game.",
        shouldLaunch: true, // Use launch instead of kill for presence type 1
        rejoinOnly: true // Use rejoinOnly mode (don't kill, just launch)
      };
    }

    // User is not in game (other cases)
    if (presence.userPresenceType !== 2) {
      return {
        status: "Kh√¥ng online üò¥",
        info: "User kh√¥ng trong game. ƒê√£ m·ªü l·∫°i game! üéÆ",
        shouldLaunch: true, // Always rejoin when not in game
        rejoinOnly: true
      };
    }

    // User is in game but wrong place
    if (!presence.rootPlaceId || presence.rootPlaceId.toString() !== targetRootPlaceId.toString()) {
      return {
        status: "Sai map üó∫Ô∏è",
        info: `User ƒëang trong game nh∆∞ng sai rootPlaceId (${presence.rootPlaceId}). ƒê√£ rejoin ƒë√∫ng map! üéØ`,
        shouldLaunch: true,
        rejoinOnly: true
      };
    }

    // User is in correct game
    return {
      status: "Online ‚úÖ",
      info: "ƒêang ·ªü ƒë√∫ng game üéÆ",
      shouldLaunch: false,
      rejoinOnly: true
    };
  }

  updateJoinStatus(shouldLaunch) {
    if (shouldLaunch) {
      this.joinedAt = Date.now();
      this.hasLaunched = true;
    }
  }
}

class UIRenderer {
  static getSystemStats() {
    const cpus = os.cpus();
    const idle = cpus.reduce((acc, cpu) => acc + cpu.times.idle, 0);
    const total = cpus.reduce((acc, cpu) => {
      return acc + cpu.times.user + cpu.times.nice + cpu.times.sys + cpu.times.irq + cpu.times.idle;
    }, 0);

    const cpuUsage = (100 - (idle / total) * 100).toFixed(1);

    const totalMem = os.totalmem();
    const freeMem = os.freemem();
    const usedMem = totalMem - freeMem;

    const totalGB = (totalMem / (1024 ** 3)).toFixed(2);
    const usedGB = (usedMem / (1024 ** 3)).toFixed(2);

    return {
      cpuUsage,
      ramUsage: `${usedGB}GB/${totalGB}GB`
    };
  }

  static renderTitle() {
    const fallbackTitle = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üöÄ  DAWN REJOIN ÔøΩÔøΩ           ‚ïë
‚ïë    B·∫£n quy·ªÅn thu·ªôc v·ªÅ The Real Dawn  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

    try {
      const title = figlet.textSync("Dawn Rejoin", {
        font: "Small",
        horizontalLayout: "fitted",
        verticalLayout: "fitted"
      });

      return boxen(title + "\nB·∫£n quy·ªÅn thu·ªôc v·ªÅ The Real Dawn", {
        padding: 1,
        borderColor: "cyan",
        borderStyle: "round",
        align: "center"
      });
    } catch (e) {
      return fallbackTitle;
    }
  }

  static calculateOptimalColumnWidths() {
    const terminalWidth = process.stdout.columns || 120;
    const availableWidth = terminalWidth - 10;

    const minWidths = {
      package: 15,
      user: 8,
      status: 8,
      info: 15,
      time: 8,
      delay: 6
    };

    const totalMinWidth = Object.values(minWidths).reduce((sum, width) => sum + width, 0);

    if (availableWidth <= totalMinWidth) {
      return {
        package: 14,
        user: 6,
        status: 6,
        info: 12,
        time: 6,
        delay: 4
      };
    }

    const extraSpace = availableWidth - totalMinWidth;

    return {
      package: minWidths.package + Math.floor(extraSpace * 0.28),
      user: minWidths.user + Math.floor(extraSpace * 0.18),
      status: minWidths.status + Math.floor(extraSpace * 0.12),
      info: minWidths.info + Math.floor(extraSpace * 0.3),
      time: minWidths.time + Math.floor(extraSpace * 0.06),
      delay: minWidths.delay + Math.floor(extraSpace * 0.06)
    };
  }

  static renderMultiInstanceTable(instances, startTime = null) {
    const stats = this.getSystemStats();
    const colWidths = this.calculateOptimalColumnWidths();

    // T√≠nh to√°n uptime
    let uptimeText = "";
    if (startTime) {
      const uptimeMs = Date.now() - startTime;
      const hours = Math.floor(uptimeMs / (1000 * 60 * 60));
      const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((uptimeMs % (1000 * 60)) / 1000);
      uptimeText = ` | ‚è±Ô∏è Uptime: ${hours}h ${minutes}m ${seconds}s`;
    }

    const cpuRamLine = `üíª CPU: ${stats.cpuUsage}% | üß† RAM: ${stats.ramUsage} | üî• Instances: ${instances.length}${uptimeText}`;

    const table = new Table({
      head: ["Package", "User", "Status", "Info", "Time", "Delay"],
      colWidths: [
        colWidths.package,
        colWidths.user,
        colWidths.status,
        colWidths.info,
        colWidths.time,
        colWidths.delay
      ],
      wordWrap: true,
      style: {
        head: ["cyan"],
        border: ["gray"]
      }
    });

    instances.forEach(instance => {
      let packageDisplay;
      const prefix = Utils.loadPackagePrefixConfig();
      if (instance.packageName === `${prefix}.client`) {
        packageDisplay = 'Global üåç';
      } else if (instance.packageName === `${prefix}.client.vnggames`) {
        packageDisplay = 'VNG üáªüá≥';
      } else {
        packageDisplay = instance.packageName;
      }

      const rawUsername = instance.config.username || instance.user.username || 'Unknown';
      const username = Utils.maskSensitiveInfo(rawUsername);

      const delaySeconds = Number(instance.countdownSeconds) || 0;

      table.push([
        packageDisplay,
        username,
        instance.status,
        instance.info,
        new Date().toLocaleTimeString(),
        this.formatCountdown(delaySeconds)
      ]);
    });

    return `${cpuRamLine}\n${table.toString()}`;
  }

  static formatCountdown(seconds) {
    return seconds >= 60
      ? `${Math.floor(seconds / 60)}m ${seconds % 60}s`
      : `${seconds}s`;
  }

  static displayConfiguredPackages(configs) {
    const colWidths = this.calculateOptimalColumnWidths();

    const table = new Table({
      head: ["STT", "Package", "Username", "Game", "Delay"],
      colWidths: [5, 20, 15, 20, 8],
      style: {
        head: ["cyan"],
        border: ["gray"]
      }
    });

    let index = 1;
    for (const [packageName, config] of Object.entries(configs)) {
      let packageDisplay;
      const prefix = Utils.loadPackagePrefixConfig();
      if (packageName === `${prefix}.client`) {
        packageDisplay = 'Global üåç';
      } else if (packageName === `${prefix}.client.vnggames`) {
        packageDisplay = 'VNG üáªüá≥';
      } else {
        packageDisplay = packageName;
      }

      // ·∫®n username ch·ªâ hi·ªán 3 k√Ω t·ª± cu·ªëi
      const maskedUsername = Utils.maskSensitiveInfo(config.username);

      table.push([
        index.toString(),
        packageDisplay,
        maskedUsername,
        config.gameName || 'Unknown',
        `${config.delaySec}s`
      ]);
      index++;
    }

    return table.toString();
  }
}

class MultiRejoinTool {
  constructor() {
    this.instances = [];
    this.isRunning = false;
    this.startTime = Date.now(); // Th√™m th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ t√≠nh uptime
  }

  async start() {
    try {
      Utils.ensureRoot();
      Utils.enableWakeLock();

      console.clear();
      let visitCount = null;
      try {
        visitCount = await Utils.curlPastebinVisits();
      } catch (e) {
        // Kh√¥ng log l·ªói v√† kh√¥ng hi·ªÉn th·ªã g√¨ ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn logic main
        visitCount = null;
      }
      
      try {
        console.log(UIRenderer.renderTitle());
      } catch (e) {
        console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üöÄ   DAWN REJOIN   üöÄ        ‚ïë
‚ïë    B·∫£n quy·ªÅn thu·ªôc v·ªÅ The Real Dawn  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`);
      }
      
      if (visitCount) {
        console.log(`\nT·ªïng l∆∞·ª£t ch·∫°y: ${visitCount}`);
        console.log(`discord.gg/37VJXk9hH4`);
      }
      console.log("\nüéØ Rejoin Tool");
      console.log("1. üöÄ B·∫Øt ƒë·∫ßu auto rejoin");
      console.log("2. ‚öôÔ∏è Setup packages");
      console.log("3. ‚úèÔ∏è Ch·ªânh s·ª≠a config");
      console.log("4. üì¶ Ch·ªânh prefix package Roblox");
      console.log("5. üéØ Ch·ªânh activity Roblox");
      console.log("6. üîó C·∫•u h√¨nh webhook");

      const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
      const choice = await Utils.ask(rl, "\nCh·ªçn option (1-6): ");

      try {
        if (choice.trim() === "1") {
          await this.startAutoRejoin(rl);
          rl.close();
        } else if (choice.trim() === "2") {
          await this.setupPackages(rl);
          rl.close();
        } else if (choice.trim() === "3") {
          await this.editConfigs(rl);
          rl.close();
        } else if (choice.trim() === "4") {
          await this.configurePackagePrefix(rl);
          rl.close();
        } else if (choice.trim() === "5") {
          await this.configureActivity(rl);
          rl.close();
        } else if (choice.trim() === "6") {
          await this.setupWebhook(rl);
          rl.close();
        } else {
          console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
          rl.close();
          // Quay l·∫°i menu thay v√¨ exit
          await new Promise(resolve => setTimeout(resolve, 1000));
          await this.start();
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn: ${error.message}`);
        rl.close();
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.start();
      }
    } catch (error) {
      console.log(`‚ùå L·ªói nghi√™m tr·ªçng trong start: ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, 3000));
      await this.start();
    }
  }

  async setupPackages(rl) {
    console.log("\nüîç ƒêang qu√©t t·∫•t c·∫£ packages Roblox...");
    const packages = Utils.detectAllRobloxPackages();
    
    if (Object.keys(packages).length === 0) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y package Roblox n√†o!");
      return;
    }

    console.log("\nüì¶ T√¨m th·∫•y c√°c packages:");
    console.log("0. üöÄ Setup t·∫•t c·∫£ packages");
    const packageList = [];
    Object.values(packages).forEach((pkg, index) => {
      console.log(`${index + 1}. ${pkg.displayName} (${pkg.packageName})`);
      packageList.push({ packageName: Object.keys(packages)[index], packageInfo: pkg });
    });

    const choice = await Utils.ask(rl, "\nCh·ªçn packages ƒë·ªÉ setup (0 ƒë·ªÉ setup t·∫•t c·∫£, ho·∫∑c s·ªë c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng): ");
    let selectedPackages = [];

    if (choice.trim() === "0") {
      selectedPackages = packageList;
      console.log("üöÄ S·∫Ω setup t·∫•t c·∫£ packages!");
    } else {
      const indices = choice
        .trim()
        .split(/\s+/)
        .map(str => parseInt(str) - 1)
        .filter(i => i >= 0 && i < packageList.length);

      if (indices.length === 0) {
        console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        await new Promise(resolve => setTimeout(resolve, 1000));
        await this.setupPackages(rl);
        return;
      }

      selectedPackages = indices.map(i => packageList[i]);
      console.log(`üéØ S·∫Ω setup c√°c packages:`);
      selectedPackages.forEach((pkg, i) => {
        console.log(`  - ${i + 1}. ${pkg.packageInfo.displayName}`);
      });
    }

    // T·∫°o config m·ªõi ho√†n to√†n, kh√¥ng load config c≈©
    const configs = {};
    
    for (const { packageName, packageInfo } of selectedPackages) {
      console.clear();
      console.log(UIRenderer.renderTitle());
      console.log(`\n‚öôÔ∏è C·∫•u h√¨nh cho ${packageInfo.displayName}`);
      
      const cookie = Utils.getRobloxCookie(packageName);
      if (!cookie) {
        console.log(`‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie cho ${packageName}, b·ªè qua...`);
        continue;
      }

      const user = new RobloxUser(null, null, cookie);
      const userId = await user.fetchAuthenticatedUser();
      
      if (!userId) {
        console.log(`‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c user info cho ${packageName}, b·ªè qua...`);
        continue;
      }

      console.log(`üë§ Username: ${Utils.maskSensitiveInfo(user.username)}`);
      console.log(`üÜî User ID: ${Utils.maskSensitiveInfo(userId)}`);

      const selector = new GameSelector();
      const game = await selector.chooseGame(rl);

      let delaySec;
      while (true) {
        const input = parseInt(await Utils.ask(rl, "‚è±Ô∏è Delay check (gi√¢y, 15-120): ")) || 1;
        if (input >= 15 && input <= 120) {
          delaySec = input;
          break;
        }
        console.log("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.");
      }

      configs[packageName] = {
        username: user.username,
        userId,
        placeId: game.placeId,
        gameName: game.name,
        linkCode: game.linkCode,
        delaySec,
        packageName
      };

      console.log(`‚úÖ ƒê√£ c·∫•u h√¨nh xong cho ${packageInfo.displayName}!`);
    }

    Utils.saveMultiConfigs(configs);
    console.log("\n‚úÖ Setup ho√†n t·∫•t!");
    
    // Quay l·∫°i menu ch√≠nh thay v√¨ exit
    console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
    await new Promise(resolve => setTimeout(resolve, 2000));
    await this.start(); // G·ªçi l·∫°i menu ch√≠nh
  }

  async editConfigs(rl) {
    const configs = Utils.loadMultiConfigs();
    
    if (Object.keys(configs).length === 0) {
      console.log("‚ùå Ch∆∞a c√≥ config n√†o! Vui l√≤ng ch·∫°y setup packages tr∆∞·ªõc.");
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.start();
      return;
    }



    const configEditor = new ConfigEditor();
    const success = await configEditor.startEdit(rl);
    
    if (success) {
      // Quay l·∫°i menu ch√≠nh
      console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.start();
    } else {
      // N·∫øu c√≥ l·ªói ho·∫∑c kh√¥ng c√≥ config, quay l·∫°i menu ch√≠nh
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.start();
    }
  }

  async setupWebhook(rl) {
    const webhookManager = new WebhookManager();
    await webhookManager.setupWebhook(rl);

    // Quay l·∫°i menu ch√≠nh
    console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
    await new Promise(resolve => setTimeout(resolve, 2000));
    await this.start();
  }

  async configurePackagePrefix(rl) {
    console.clear();
    console.log(UIRenderer.renderTitle());
    console.log("\nüì¶ C·∫•u h√¨nh Prefix Package Roblox");

    // Hi·ªÉn th·ªã prefix hi·ªán t·∫°i
    const currentPrefix = Utils.loadPackagePrefixConfig();
    console.log(`\nüìã Prefix hi·ªán t·∫°i: ${currentPrefix}`);

    console.log("\nüéØ Ch·ªçn h√†nh ƒë·ªông:");
    console.log("1. ‚úèÔ∏è Thay ƒë·ªïi prefix");
    console.log("2. üîÑ ƒê·∫∑t l·∫°i v·ªÅ m·∫∑c ƒë·ªãnh (com.roblox)");
    console.log("3. ‚è≠Ô∏è Quay l·∫°i menu ch√≠nh");

    const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (1-3): ");

    if (choice.trim() === "1") {
      console.log("\n‚úèÔ∏è Thay ƒë·ªïi prefix package Roblox");
      console.log("V√≠ d·ª•: com.roblox, con.roblx, com.robloxclone, etc.");

      let newPrefix;
      while (true) {
        newPrefix = await Utils.ask(rl, "Nh·∫≠p prefix m·ªõi: ");
        if (newPrefix.trim()) {
          break;
        }
        console.log("‚ùå Prefix kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      }

      Utils.savePackagePrefixConfig(newPrefix.trim());
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t prefix th√†nh: ${newPrefix.trim()}`);

    } else if (choice.trim() === "2") {
      Utils.savePackagePrefixConfig("com.roblox");
      console.log("‚úÖ ƒê√£ ƒë·∫∑t l·∫°i prefix v·ªÅ m·∫∑c ƒë·ªãnh: com.roblox");

    } else if (choice.trim() === "3") {
      // Quay l·∫°i menu ch√≠nh
      console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.start();
      return;
    } else {
      console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
    }

    // Quay l·∫°i menu ch√≠nh
    console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
    await new Promise(resolve => setTimeout(resolve, 2000));
    await this.start();
  }

  async configureActivity(rl) {
    console.clear();
    console.log(UIRenderer.renderTitle());
    console.log("\nüéØ C·∫•u h√¨nh Activity Roblox");

    // Hi·ªÉn th·ªã activity hi·ªán t·∫°i
    const currentActivity = Utils.loadActivityConfig();
    const currentPrefix = Utils.loadPackagePrefixConfig();

    if (currentActivity) {
      console.log(`\nüìã Activity t√πy ch·ªânh hi·ªán t·∫°i: ${currentActivity}`);
      console.log(`‚ö†Ô∏è  ƒêang s·ª≠ d·ª•ng activity t√πy ch·ªânh thay v√¨ activity m·∫∑c ƒë·ªãnh!`);
    } else {
      console.log(`\nüìã Activity hi·ªán t·∫°i: S·ª≠ d·ª•ng activity m·∫∑c ƒë·ªãnh (${currentPrefix}.client.ActivityProtocolLaunch)`);
    }

    console.log("\nüéØ Ch·ªçn h√†nh ƒë·ªông:");
    console.log("1. ‚úèÔ∏è Thay ƒë·ªïi activity");
    console.log("2. üîÑ ƒê·∫∑t l·∫°i v·ªÅ activity m·∫∑c ƒë·ªãnh");
    console.log("3. ‚è≠Ô∏è Quay l·∫°i menu ch√≠nh");

    const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (1-3): ");

    if (choice.trim() === "1") {
      console.log("\n‚úèÔ∏è Thay ƒë·ªïi activity Roblox");
      console.log(`V√≠ d·ª•: ${currentPrefix}.client.ActivityProtocolLaunch`);
      console.log(`        ${currentPrefix}.client.vnggames.ActivityProtocolLaunch`);
      console.log(`        com.roblox.client.ActivityProtocolLaunch`);
      console.log("\n‚ö†Ô∏è  L∆∞u √Ω: Activity ph·∫£i kh·ªõp v·ªõi package name ƒë·ªÉ ho·∫°t ƒë·ªông ƒë√∫ng!");

      let newActivity;
      while (true) {
        newActivity = await Utils.ask(rl, "Nh·∫≠p activity m·ªõi: ");
        if (newActivity.trim()) {
          break;
        }
        console.log("‚ùå Activity kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      }

      Utils.saveActivityConfig(newActivity.trim());
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t activity th√†nh: ${newActivity.trim()}`);
      console.log(`‚ö†Ô∏è  Activity t√πy ch·ªânh s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng cho t·∫•t c·∫£ packages!`);

    } else if (choice.trim() === "2") {
      if (currentActivity) {
        Utils.saveActivityConfig(null);
        console.log("‚úÖ ƒê√£ ƒë·∫∑t l·∫°i v·ªÅ activity m·∫∑c ƒë·ªãnh!");
        console.log(`üìã Activity m·∫∑c ƒë·ªãnh: ${currentPrefix}.client.ActivityProtocolLaunch`);
      } else {
        console.log("‚ÑπÔ∏è ƒê√£ ƒëang s·ª≠ d·ª•ng activity m·∫∑c ƒë·ªãnh!");
      }

    } else if (choice.trim() === "3") {
      // Quay l·∫°i menu ch√≠nh
      console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.start();
      return;
    } else {
      console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
    }

    // Quay l·∫°i menu ch√≠nh
    console.log("\n‚è≥ ƒêang quay l·∫°i menu ch√≠nh...");
    await new Promise(resolve => setTimeout(resolve, 2000));
    await this.start();
  }



  async startAutoRejoin(rl) {
  const configs = Utils.loadMultiConfigs();

  if (Object.keys(configs).length === 0) {
    console.log("‚ùå Ch∆∞a c√≥ config n√†o! Vui l√≤ng ch·∫°y setup packages tr∆∞·ªõc.");
    await new Promise(resolve => setTimeout(resolve, 2000));
    await this.start();
    return;
  }

  // Ki·ªÉm tra to√†n v·∫πn packages tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
  console.log("\nüîí Ki·ªÉm tra to√†n v·∫πn h·ªá th·ªëng...");
  const isValid = Utils.validatePackageIntegrity(configs);
  
  if (!isValid) {
    console.log("\n‚è≥ Quay l·∫°i menu ch√≠nh sau 5 gi√¢y...");
    await new Promise(resolve => setTimeout(resolve, 5000));
    await this.start();
    return;
  }



  console.log("\nüìã Danh s√°ch packages ƒë√£ c·∫•u h√¨nh:");
  console.log(UIRenderer.displayConfiguredPackages(configs));

  console.log("\nüéØ Ch·ªçn packages ƒë·ªÉ ch·∫°y:");
  console.log("0. üöÄ Ch·∫°y t·∫•t c·∫£ packages");

  let index = 1;
  const packageList = [];
  for (const [packageName, config] of Object.entries(configs)) {
  let packageDisplay;
  const prefix = Utils.loadPackagePrefixConfig();
  if (packageName === `${prefix}.client`) {
    packageDisplay = 'Global üåç';
  } else if (packageName === `${prefix}.client.vnggames`) {
    packageDisplay = 'VNG üáªüá≥';
  } else {
    packageDisplay = packageName;
  }

    // ·∫®n username ch·ªâ hi·ªán 3 k√Ω t·ª± cu·ªëi
    const maskedUsername = Utils.maskSensitiveInfo(config.username);

    console.log(`${index}. ${packageDisplay} (${maskedUsername})`);
    packageList.push(packageName);
    index++;
  }

  const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (0 ƒë·ªÉ ch·∫°y t·∫•t c·∫£, ho·∫∑c s·ªë c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng): ");
  let selectedPackages = [];

  if (choice.trim() === "0") {
    selectedPackages = Object.keys(configs);
    console.log("üöÄ S·∫Ω ch·∫°y t·∫•t c·∫£ packages!");
  } else {
    const indices = choice
      .trim()
      .split(/\s+/)
      .map(str => parseInt(str) - 1)
      .filter(i => i >= 0 && i < packageList.length);

    if (indices.length === 0) {
      console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
      await new Promise(resolve => setTimeout(resolve, 1000));
      await this.startAutoRejoin(rl);
      return;
    }

    selectedPackages = indices.map(i => packageList[i]);
    console.log(`üéØ S·∫Ω ch·∫°y c√°c packages:`);
    selectedPackages.forEach((pkg, i) => {
      console.log(`  - ${i + 1}. ${pkg}`);
    });
  }

  console.log("\nüöÄ Kh·ªüi t·∫°o multi-instance rejoin...");
  await this.initializeSelectedInstances(selectedPackages, configs);
}
  // NEW: Method ƒë·ªÉ kh·ªüi t·∫°o ch·ªâ c√°c packages ƒë∆∞·ª£c ch·ªçn
  async initializeSelectedInstances(selectedPackages, configs) {
    // Initialize instances ch·ªâ cho c√°c packages ƒë∆∞·ª£c ch·ªçn
    for (const packageName of selectedPackages) {
      const config = configs[packageName];
      const cookie = Utils.getRobloxCookie(packageName);
      
      if (!cookie) {
        console.log(`‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie cho ${packageName}, b·ªè qua...`);
        continue;
      }

      const user = new RobloxUser(config.username, config.userId, cookie);
      const statusHandler = new StatusHandler();

      this.instances.push({
        packageName,
        user,
        config,
        statusHandler,
        status: "Kh·ªüi t·∫°o... üîÑ",
        info: "ƒêang chu·∫©n b·ªã...",
        countdown: "00s",
        lastCheck: 0,
        presenceType: "Unknown"
      });
    }

    if (this.instances.length === 0) {
      console.log("‚ùå Kh√¥ng c√≥ instance n√†o kh·∫£ d·ª•ng!");
      return;
    }

    console.log(`‚úÖ ƒê√£ kh·ªüi t·∫°o ${this.instances.length} instances!`);
    console.log("‚è≥ B·∫Øt ƒë·∫ßu auto rejoin trong 3 gi√¢y...");
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    this.isRunning = true;
    await this.runMultiInstanceLoop();
  }

async runMultiInstanceLoop() {
  let renderCounter = 0;
  let webhookCounter = 0;
  const webhookManager = new WebhookManager();
  const webhookConfig = Utils.loadWebhookConfig();

  while (this.isRunning) {
    const now = Date.now();

    for (const instance of this.instances) {
      const { config, user, statusHandler } = instance;
      const delayMs = config.delaySec * 1000;

      const timeSinceLastCheck = now - instance.lastCheck;

      // ƒê·∫øm ng∆∞·ª£c c√≤n bao nhi√™u gi√¢y n·ªØa th√¨ check l·∫°i
      const timeLeft = Math.max(0, delayMs - timeSinceLastCheck);
      instance.countdownSeconds = Math.ceil(timeLeft / 1000);

      // N·∫øu ƒë·ªß th·ªùi gian th√¨ check
      if (timeSinceLastCheck >= delayMs) {
        const presence = await user.getPresence();

        // Ghi l·∫°i type ƒë·ªÉ hi·ªÉn th·ªã
        let presenceTypeDisplay = "Unknown";
        if (presence && presence.userPresenceType !== undefined) {
          presenceTypeDisplay = presence.userPresenceType.toString();
        }

        const analysis = statusHandler.analyzePresence(presence, config.placeId);

        if (analysis.shouldLaunch) {
          GameLauncher.handleGameLaunch(
            analysis.shouldLaunch,
            config.placeId,
            config.linkCode,
            config.packageName,
            true // Always use rejoinOnly mode (no kill, just launch)
          );
          statusHandler.updateJoinStatus(analysis.shouldLaunch);
        }

        instance.status = analysis.status;
        instance.info = analysis.info;
        instance.presenceType = presenceTypeDisplay;
        instance.lastCheck = now;
      }

      // N·∫øu ch∆∞a check l·∫ßn n√†o ho·∫∑c ch∆∞a set presenceType th√¨ gi·ªØ "Unknown"
      if (!instance.presenceType) {
        instance.presenceType = "Unknown";
      }
    }

    // G·ª≠i webhook theo ƒë·ªãnh k·ª≥
    if (webhookConfig && webhookConfig.enabled && webhookCounter % (webhookConfig.intervalMinutes * 60) === 0 && webhookCounter > 0) {
      console.log(`\nüì§ ƒêang g·ª≠i webhook status...`);
      await webhookManager.sendStatusWebhook(this.instances, this.startTime);
    }

    if (renderCounter % 5 === 0) {
      console.clear();
      try {
        console.log(UIRenderer.renderTitle());
      } catch (e) {
      console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üöÄ   DAWN REJOIN   üöÄ        ‚ïë
‚ïë    B·∫£n quy·ªÅn thu·ªôc v·ªÅ The Real Dawn  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`);
      }

      console.log(UIRenderer.renderMultiInstanceTable(this.instances, this.startTime));

      if (this.instances.length > 0) {
        console.log("\nüîç Debug (Instance 1):");
        console.log(`Package: ${this.instances[0].packageName}`);
        console.log(`Last Check: ${new Date(this.instances[0].lastCheck).toLocaleTimeString()}`);
      }

      // Hi·ªÉn th·ªã th√¥ng tin webhook n·∫øu c√≥
      if (webhookConfig) {
        const urlParts = webhookConfig.url.split('/');
        const webhookId = urlParts[urlParts.length - 2] || 'unknown';
        const statusText = webhookConfig.enabled ? '‚úÖ ƒê√£ b·∫≠t' : '‚ùå ƒê√£ t·∫Øt';
        console.log(`\nüîó Webhook Status: ID ${webhookId} - ${statusText} - [ƒê√É ·∫®N V√å L√ù DO B·∫¢O M·∫¨T]`);
        if (webhookConfig.enabled) {
          const nextWebhookIn = (webhookConfig.intervalMinutes * 60) - (webhookCounter % (webhookConfig.intervalMinutes * 60));
          const minutes = Math.floor(nextWebhookIn / 60);
          const seconds = nextWebhookIn % 60;
          console.log(`üîó Webhook: ${minutes}m ${seconds}s n·ªØa s·∫Ω g·ª≠i b√°o c√°o (${webhookConfig.intervalMinutes} ph√∫t/l·∫ßn)`);
        } else {
          console.log(`üîó Webhook: ƒê√£ t·∫Øt - kh√¥ng g·ª≠i b√°o c√°o t·ª± ƒë·ªông`);
        }
      }

      console.log("\nüí° Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh");
    }

    renderCounter++;
    webhookCounter++;
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

}

class WebhookManager {
  constructor() {
    this.webhookConfig = Utils.loadWebhookConfig();
  }

  async setupWebhook(rl) {
    console.clear();
    console.log(UIRenderer.renderTitle());
    console.log("\nüîó C·∫•u h√¨nh Webhook Discord");
    console.log("=".repeat(50));
    
    if (this.webhookConfig) {
      console.log(`\nüìã C·∫•u h√¨nh hi·ªán t·∫°i:`);
      const urlParts = this.webhookConfig.url.split('/');
      const webhookId = urlParts[urlParts.length - 2] || 'unknown';
      console.log(`üîó Webhook ID: ${webhookId}`);
      console.log(`üîó URL: [ƒê√É ·∫®N V√å L√ù DO B·∫¢O M·∫¨T]`);
      console.log(`‚è±Ô∏è Th·ªùi gian g·ª≠i: ${this.webhookConfig.intervalMinutes} ph√∫t`);
      console.log(`üìä Tr·∫°ng th√°i: ${this.webhookConfig.enabled ? '‚úÖ ƒê√£ b·∫≠t' : '‚ùå ƒê√£ t·∫Øt'}`);
      
      console.log("\nüéØ Ch·ªçn h√†nh ƒë·ªông:");
      console.log("1. ‚úèÔ∏è Ch·ªânh s·ª≠a webhook");
      console.log("2. üîÑ B·∫≠t/T·∫Øt webhook");
      console.log("3. ‚ùå X√≥a webhook");
      console.log("4. ‚è≠Ô∏è Quay l·∫°i menu ch√≠nh");
      
      const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (1-4): ");
      
      if (choice.trim() === "1") {
        await this.editWebhook(rl);
      } else if (choice.trim() === "2") {
        await this.toggleWebhook(rl);
      } else if (choice.trim() === "3") {
        await this.deleteWebhook(rl);
      } else {
        return;
      }
    } else {
      console.log("\nüìù Ch∆∞a c√≥ c·∫•u h√¨nh webhook!");
      console.log("\nüéØ Ch·ªçn h√†nh ƒë·ªông:");
      console.log("1. ‚ûï T·∫°o webhook m·ªõi");
      console.log("2. ‚è≠Ô∏è Quay l·∫°i menu ch√≠nh");
      
      const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (1-2): ");
      
      if (choice.trim() === "1") {
        await this.createWebhook(rl);
      } else {
        return;
      }
    }
  }

  async createWebhook(rl) {
    console.log("\nüìù T·∫°o c·∫•u h√¨nh webhook m·ªõi:");
    
    let webhookUrl;
    while (true) {
      webhookUrl = await Utils.ask(rl, "üîó Nh·∫≠p URL webhook Discord: ");
      if (webhookUrl.trim() && webhookUrl.includes('discord.com/api/webhooks/')) {
        break;
      }
      console.log("‚ùå URL webhook kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.");
    }

    let intervalMinutes;
    while (true) {
      const input = await Utils.ask(rl, "‚è±Ô∏è Th·ªùi gian g·ª≠i webhook (5-180 ph√∫t): ");
      intervalMinutes = parseInt(input);
      if (intervalMinutes >= 5 && intervalMinutes <= 180) {
        break;
      }
      console.log("‚ùå Th·ªùi gian ph·∫£i t·ª´ 5-180 ph√∫t! Vui l√≤ng nh·∫≠p l·∫°i.");
    }

    this.webhookConfig = {
      url: webhookUrl.trim(),
      intervalMinutes: intervalMinutes,
      enabled: true
    };

    Utils.saveWebhookConfig(this.webhookConfig);
    console.log("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh webhook!");
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  async editWebhook(rl) {
    console.log("\n‚úèÔ∏è Ch·ªânh s·ª≠a webhook:");
    
    let webhookUrl;
    while (true) {
      const urlParts = this.webhookConfig.url.split('/');
      const webhookId = urlParts[urlParts.length - 2] || 'unknown';
      webhookUrl = await Utils.ask(rl, `üîó Webhook ID hi·ªán t·∫°i: ${webhookId}\nüîó URL: [ƒê√É ·∫®N V√å L√ù DO B·∫¢O M·∫¨T]\nNh·∫≠p URL m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n): `);
      if (!webhookUrl.trim()) {
        webhookUrl = this.webhookConfig.url;
        break;
      }
      if (webhookUrl.includes('discord.com/api/webhooks/')) {
        break;
      }
      console.log("‚ùå URL webhook kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.");
    }

    let intervalMinutes;
    while (true) {
      const input = await Utils.ask(rl, `‚è±Ô∏è Th·ªùi gian hi·ªán t·∫°i: ${this.webhookConfig.intervalMinutes} ph√∫t\nNh·∫≠p th·ªùi gian m·ªõi (5-180 ph√∫t, Enter ƒë·ªÉ gi·ªØ nguy√™n): `);
      if (!input.trim()) {
        intervalMinutes = this.webhookConfig.intervalMinutes;
        break;
      }
      intervalMinutes = parseInt(input);
      if (intervalMinutes >= 5 && intervalMinutes <= 180) {
        break;
      }
      console.log("‚ùå Th·ªùi gian ph·∫£i t·ª´ 5-180 ph√∫t! Vui l√≤ng nh·∫≠p l·∫°i.");
    }

    this.webhookConfig = {
      url: webhookUrl.trim(),
      intervalMinutes: intervalMinutes,
      enabled: this.webhookConfig.enabled // Gi·ªØ nguy√™n tr·∫°ng th√°i enabled
    };

    Utils.saveWebhookConfig(this.webhookConfig);
    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh webhook!");
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  async toggleWebhook(rl) {
    console.log("\nüîÑ B·∫≠t/T·∫Øt webhook:");
    const urlParts = this.webhookConfig.url.split('/');
    const webhookId = urlParts[urlParts.length - 2] || 'unknown';
    console.log(`üîó Webhook ID: ${webhookId}`);
    console.log(`üîó URL: [ƒê√É ·∫®N V√å L√ù DO B·∫¢O M·∫¨T]`);
    console.log(`‚è±Ô∏è Th·ªùi gian g·ª≠i: ${this.webhookConfig.intervalMinutes} ph√∫t`);
    console.log(`üìä Tr·∫°ng th√°i hi·ªán t·∫°i: ${this.webhookConfig.enabled ? '‚úÖ ƒê√£ b·∫≠t' : '‚ùå ƒê√£ t·∫Øt'}`);
    
    const newStatus = !this.webhookConfig.enabled;
    const statusText = newStatus ? 'b·∫≠t' : 't·∫Øt';
    
    const confirm = await Utils.ask(rl, `\n‚ö†Ô∏è B·∫°n c√≥ mu·ªën ${statusText} webhook? (y/N): `);
    
    if (confirm.toLowerCase() === 'y' || confirm.toLowerCase() === 'yes') {
      this.webhookConfig.enabled = newStatus;
      Utils.saveWebhookConfig(this.webhookConfig);
      console.log(`‚úÖ ƒê√£ ${statusText} webhook!`);
      if (newStatus) {
        console.log("üìä Webhook s·∫Ω g·ª≠i b√°o c√°o t·ª± ƒë·ªông.");
      } else {
        console.log("üìä Webhook s·∫Ω kh√¥ng g·ª≠i b√°o c√°o t·ª± ƒë·ªông.");
      }
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log("‚ùå ƒê√£ h·ªßy thay ƒë·ªïi tr·∫°ng th√°i webhook.");
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  async deleteWebhook(rl) {
    console.log("\n‚ùå X√≥a c·∫•u h√¨nh webhook:");
    const urlParts = this.webhookConfig.url.split('/');
    const webhookId = urlParts[urlParts.length - 2] || 'unknown';
    console.log(`üîó Webhook ID: ${webhookId}`);
    console.log(`üîó URL: [ƒê√É ·∫®N V√å L√ù DO B·∫¢O M·∫¨T]`);
    console.log(`‚è±Ô∏è Th·ªùi gian g·ª≠i: ${this.webhookConfig.intervalMinutes} ph√∫t`);
    
    const confirm = await Utils.ask(rl, "\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a webhook? (y/N): ");
    
    if (confirm.toLowerCase() === 'y' || confirm.toLowerCase() === 'yes') {
      Utils.saveWebhookConfig(null);
      this.webhookConfig = null;
      console.log("‚úÖ ƒê√£ x√≥a c·∫•u h√¨nh webhook!");
      console.log("üìä Webhook s·∫Ω kh√¥ng c√≤n g·ª≠i b√°o c√°o t·ª± ƒë·ªông.");
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log("‚ùå ƒê√£ h·ªßy x√≥a webhook.");
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  async sendStatusWebhook(instances, startTime) {
    if (!this.webhookConfig || !this.webhookConfig.enabled) return;

    try {
      const stats = UIRenderer.getSystemStats();
      const uptimeMs = Date.now() - startTime;
      const hours = Math.floor(uptimeMs / (1000 * 60 * 60));
      const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((uptimeMs % (1000 * 60)) / 1000);

      // ƒê·∫øm s·ªë package ƒëang ch·∫°y
      const activePackages = instances.filter(instance => 
        instance.status === "Online ‚úÖ" || instance.status.includes("Online")
      ).length;

      // T·∫°o danh s√°ch package
      const packageList = instances.map(instance => {
        let packageDisplay;
        const prefix = Utils.loadPackagePrefixConfig();
        if (instance.packageName === `${prefix}.client`) {
          packageDisplay = 'Global üåç';
        } else if (instance.packageName === `${prefix}.client.vnggames`) {
          packageDisplay = 'VNG üáªüá≥';
        } else {
          packageDisplay = instance.packageName;
        }
        return `${packageDisplay}: ${instance.status}`;
      }).join('\n');

      const embed = {
        title: "üñ•Ô∏è Dawn Rejoin Status Report",
        color: 0x00ff00,
        timestamp: new Date().toISOString(),
        fields: [
          {
            name: "üíª CPU Usage",
            value: `${stats.cpuUsage}%`,
            inline: true
          },
          {
            name: "üß† RAM Usage",
            value: stats.ramUsage,
            inline: true
          },
          {
            name: "‚è±Ô∏è Uptime",
            value: `${hours}h ${minutes}m ${seconds}s`,
            inline: true
          },
          {
            name: "üöÄ Active Instances",
            value: `${activePackages}/${instances.length}`,
            inline: true
          },
          {
            name: "üì¶ Package Status",
            value: packageList.length > 1024 ? packageList.substring(0, 1021) + "..." : packageList,
            inline: false
          }
        ],
        footer: {
          text: "Dawn Rejoin Tool - The Real Dawn"
        }
      };

      // Ch·ª•p ·∫£nh m√†n h√¨nh
      const screenshotPath = await Utils.takeScreenshot();
      
      // G·ª≠i webhook
      await Utils.sendWebhookEmbed(this.webhookConfig.url, embed, screenshotPath);
      
    } catch (e) {
      console.error(`‚ùå L·ªói khi g·ª≠i webhook: ${e.message}`);
    }
  }
}

class ConfigEditor {
  constructor() {
    this.configs = Utils.loadMultiConfigs();
  }

  async startEdit(rl) {
    try {
      if (Object.keys(this.configs).length === 0) {
        console.log("‚ùå Ch∆∞a c√≥ config n√†o! Vui l√≤ng ch·∫°y setup packages tr∆∞·ªõc.");
        await new Promise(resolve => setTimeout(resolve, 2000));
        return false; // Return false to indicate we should go back to main menu
      }

      console.log("\nüìã Danh s√°ch config hi·ªán t·∫°i:");
      console.log(this.renderConfigTable());

      console.log("\nüéØ Ch·ªçn config ƒë·ªÉ ch·ªânh s·ª≠a:");
      console.log("0. ‚úèÔ∏è S·ª≠a t·∫•t c·∫£ config");
      
      let index = 1;
      const configList = [];
      for (const [packageName, config] of Object.entries(this.configs)) {
        try {
          let packageDisplay;
          const prefix = Utils.loadPackagePrefixConfig();
          if (packageName === `${prefix}.client`) {
            packageDisplay = 'Global üåç';
          } else if (packageName === `${prefix}.client.vnggames`) {
            packageDisplay = 'VNG üáªüá≥';
          } else {
            packageDisplay = packageName;
          }

          // ·∫®n username ch·ªâ hi·ªán 3 k√Ω t·ª± cu·ªëi
          const maskedUsername = Utils.maskSensitiveInfo(config.username);

          // ·∫®n userId ch·ªâ hi·ªán 3 k√Ω t·ª± cu·ªëi
          const maskedUserId = Utils.maskSensitiveInfo(config.userId);

          console.log(`${index}. ${packageDisplay} (${maskedUsername}) - Game: ${config.gameName || 'Unknown'}`);
          configList.push({ packageName, config });
          index++;
        } catch (error) {
          console.log(`‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω config ${packageName}: ${error.message}`);
          continue;
        }
      }

      if (configList.length === 0) {
        console.log("‚ùå Kh√¥ng c√≥ config h·ª£p l·ªá n√†o!");
        await new Promise(resolve => setTimeout(resolve, 2000));
        return false;
      }

      const choice = await Utils.ask(rl, "\nNh·∫≠p l·ª±a ch·ªçn (0 ƒë·ªÉ s·ª≠a t·∫•t c·∫£, ho·∫∑c s·ªë c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng): ");
      let selectedConfigs = [];

      if (choice.trim() === "0") {
        selectedConfigs = configList;
        console.log("‚úèÔ∏è S·∫Ω s·ª≠a t·∫•t c·∫£ config!");
      } else {
        try {
          const indices = choice
            .trim()
            .split(/\s+/)
            .map(str => parseInt(str) - 1)
            .filter(i => i >= 0 && i < configList.length);

          if (indices.length === 0) {
            console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
            await new Promise(resolve => setTimeout(resolve, 1000));
            return await this.startEdit(rl);
          }

          selectedConfigs = indices.map(i => configList[i]);
          console.log(`‚úèÔ∏è S·∫Ω s·ª≠a c√°c config:`);
          selectedConfigs.forEach((cfg, i) => {
            try {
              const maskedUsername = Utils.maskSensitiveInfo(cfg.config.username);
              console.log(`  - ${i + 1}. ${cfg.packageName} (${maskedUsername})`);
            } catch (error) {
              console.log(`  - ${i + 1}. ${cfg.packageName} (L·ªói hi·ªÉn th·ªã)`);
            }
          });
        } catch (error) {
          console.log(`‚ùå L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn: ${error.message}`);
          await new Promise(resolve => setTimeout(resolve, 1000));
          return await this.startEdit(rl);
        }
      }

      // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a t·ª´ng config
      for (const { packageName, config } of selectedConfigs) {
        try {
          console.clear();
          console.log(UIRenderer.renderTitle());
          console.log(`\n‚úèÔ∏è Ch·ªânh s·ª≠a config cho ${packageName}`);

          let packageDisplay;
          const prefix = Utils.loadPackagePrefixConfig();
          if (packageName === `${prefix}.client`) {
            packageDisplay = 'Global üåç';
          } else if (packageName === `${prefix}.client.vnggames`) {
            packageDisplay = 'VNG üáªüá≥';
          } else {
            packageDisplay = packageName;
          }

          console.log(`üì¶ Package: ${packageDisplay}`);
          console.log(`üë§ Username: ${Utils.maskSensitiveInfo(config.username)}`);
          console.log(`üÜî User ID: ${Utils.maskSensitiveInfo(config.userId)}`);
          console.log(`üéÆ Game: ${config.gameName || 'Unknown'} (${config.placeId || 'Unknown'})`);
          console.log(`‚è±Ô∏è Delay: ${config.delaySec || 'Unknown'}s`);
          if (config.linkCode) {
            console.log(`üîó Link Code: ${config.linkCode}`);
          }

          console.log("\nüìù Ch·ªçn th√¥ng tin ƒë·ªÉ ch·ªânh s·ª≠a:");
          console.log("1. üéÆ Thay ƒë·ªïi game");
          console.log("2. ‚è±Ô∏è Thay ƒë·ªïi delay");
          console.log("3. üîó Thay ƒë·ªïi link code");
          console.log("4. ‚ùå X√≥a config n√†y");
          console.log("5. ‚è≠Ô∏è B·ªè qua (gi·ªØ nguy√™n)");

          const editChoice = await Utils.ask(rl, "\nCh·ªçn option (1-5): ");

          try {
            switch (editChoice.trim()) {
              case "1":
                const selector = new GameSelector();
                const game = await selector.chooseGame(rl);
                config.placeId = game.placeId;
                config.gameName = game.name;
                config.linkCode = game.linkCode;
                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t game th√†nh ${game.name}!`);
                break;

              case "2":
                let newDelay;
                while (true) {
                  try {
                    const input = await Utils.ask(rl, "‚è±Ô∏è Delay check m·ªõi (gi√¢y, 15-120): ");
                    const delayValue = parseInt(input) || 0;
                    if (delayValue >= 15 && delayValue <= 120) {
                      newDelay = delayValue;
                      break;
                    }
                    console.log("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.");
                  } catch (error) {
                    console.log("‚ùå L·ªói khi nh·∫≠p delay, vui l√≤ng th·ª≠ l·∫°i.");
                  }
                }
                config.delaySec = newDelay;
                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t delay th√†nh ${newDelay}s!`);
                break;

              case "3":
                console.log("\nüìé D√°n link redirect sau khi v√†o private server.");
                console.log("VD: https://www.roblox.com/games/2753915549/Blox-Fruits?privateServerLinkCode=77455530946706396026289495938493");
                while (true) {
                  try {
                    const link = await Utils.ask(rl, "\nD√°n link redirect ƒë√£ chuy·ªÉn h∆∞·ªõng: ");
                    const m = link.match(/\/games\/(\d+)[^?]*\?[^=]*=([\w-]+)/);
                    if (!m) {
                      console.log(`‚ùå Link kh√¥ng h·ª£p l·ªá!`);
                      continue;
                    }
                    config.placeId = m[1];
                    config.gameName = "Private Server üîí";
                    config.linkCode = m[2];
                    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t link code!`);
                    break;
                  } catch (error) {
                    console.log(`‚ùå L·ªói khi x·ª≠ l√Ω link: ${error.message}`);
                  }
                }
                break;

              case "4":
                delete this.configs[packageName];
                console.log(`‚úÖ ƒê√£ x√≥a config cho ${packageDisplay}!`);
                break;

              case "5":
                console.log(`‚è≠Ô∏è Gi·ªØ nguy√™n config cho ${packageDisplay}`);
                break;

              default:
                console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                break;
            }
          } catch (error) {
            console.log(`‚ùå L·ªói khi ch·ªânh s·ª≠a config: ${error.message}`);
          }
        } catch (error) {
          console.log(`‚ùå L·ªói khi x·ª≠ l√Ω config ${packageName}: ${error.message}`);
          continue;
        }
      }

      // L∆∞u configs sau khi ch·ªânh s·ª≠a
      try {
        Utils.saveMultiConfigs(this.configs);
        console.log("\n‚úÖ Ho√†n t·∫•t ch·ªânh s·ª≠a config!");
      } catch (error) {
        console.log(`‚ùå L·ªói khi l∆∞u config: ${error.message}`);
      }
      
      return true; // Return true to indicate successful completion
    } catch (error) {
      console.log(`‚ùå L·ªói nghi√™m tr·ªçng trong ConfigEditor: ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, 2000));
      return false;
    }
  }

  renderConfigTable() {
    try {
      const table = new Table({
        head: ["STT", "Package", "Username", "Delay", "Game ID", "Game Name", "Server VIP Link"],
        colWidths: [5, 20, 15, 8, 15, 20, 15],
        style: {
          head: ["cyan"],
          border: ["gray"]
        }
      });

      let index = 1;
      for (const [packageName, config] of Object.entries(this.configs)) {
        try {
          let packageDisplay;
          const prefix = Utils.loadPackagePrefixConfig();
          if (packageName === `${prefix}.client`) {
            packageDisplay = 'Global üåç';
          } else if (packageName === `${prefix}.client.vnggames`) {
            packageDisplay = 'VNG üáªüá≥';
          } else {
            packageDisplay = packageName;
          }

          // ·∫®n username ch·ªâ hi·ªán 3 k√Ω t·ª± cu·ªëi
          const maskedUsername = Utils.maskSensitiveInfo(config.username);

          // Hi·ªÉn th·ªã delay thay v√¨ userId
          const delayDisplay = `${config.delaySec || 'Unknown'}s`;

          // Hi·ªÉn th·ªã link code n·∫øu c√≥
          const serverLink = config.linkCode ? `C√≥ üîó` : `Kh√¥ng ‚ùå`;

          table.push([
            index.toString(),
            packageDisplay,
            maskedUsername,
            delayDisplay,
            config.placeId || 'Unknown',
            config.gameName || 'Unknown',
            serverLink
          ]);
          index++;
        } catch (error) {
          console.log(`‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω config ${packageName}: ${error.message}`);
          // Th√™m d√≤ng l·ªói v√†o b·∫£ng
          table.push([
            index.toString(),
            packageName,
            'Error',
            'Error',
            'Error',
            'Error',
            'Error'
          ]);
          index++;
        }
      }

      return table.toString();
    } catch (error) {
      console.log(`‚ùå L·ªói khi t·∫°o b·∫£ng config: ${error.message}`);
      return "‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã b·∫£ng config";
    }
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\n\nüõë ƒêang d·ª´ng ch∆∞∆°ng tr√¨nh...');
  console.log('üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Dawn Rejoin Tool!');
  process.exit(0);
});

// Main execution
(async () => {
  const tool = new MultiRejoinTool();
  await tool.start();
})();
